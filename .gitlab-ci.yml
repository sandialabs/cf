image: maven:3.5.4-jdk-8

# Add code source quality and security scan
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml


stages:
  - test # check code with gitlab code quality check and SpotBugs
  - build # build the artifact and launch unit tests
  - deploy # deploy a snapshot under the build/ directory
  - javadoc # create and deploy javadoc on Gitlab Pages


variables:
  MAVEN_CLI_OPTS: ""
  PROJECT_ROOT_POM: "src/gov.sandia.cf/"
  DS_JAVA_VERSION: 8
  DS_DEFAULT_ANALYZERS: "gemnasium-maven"

# Workaround for Gitlab issue generating a detached pipeline for "rules" "if" "manual" jobs
workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE != "detached"'

#####################################
########## Stage test ############
#####################################

# override code_quality job to keep report artifact
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

# override gitlab spotbugs-sast
spotbugs-sast:
  stage: test
  image: maven:3.5.4-jdk-8
  extends: []
  needs: []
  before_script:
    - echo "Install GUI test dependencies"
    - apt-get update -y
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - cd $PROJECT_ROOT_POM
    - echo "Verifying cf plugin"
    - mvn $MAVEN_CLI_OPTS clean verify -DskipTests
  artifacts:
    reports:
      sast: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/spotbugsXml.xml


#####################################
########## Stage build ############
#####################################

# Keeping artifacts 3 days
build and test:
  stage: build
  before_script:
    - echo "Install GUI test dependencies"
    - apt-get update -y
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - mkdir target
    - mkdir target/build
    - mkdir target/coverage
    - cd $PROJECT_ROOT_POM
    - echo "Building cf plugin"
    - mvn $MAVEN_CLI_OPTS clean install
    - cp -R releng/gov.sandia.cf.update/target/site/. ../../target/build/
    - cp -R tests/gov.sandia.cf.plugin.tests/target/coverage-site/. ../../target/coverage/
    - cp tests/gov.sandia.cf.plugin.tests/target/build-test.log ../../target/build-test.log
  artifacts:
    expire_in: 3 days
    paths:
      - target
    reports:
      junit: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/surefire-reports/TEST-*.xml
      cobertura: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/coverage-site/jacoco.xml
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - when: never

# Keeping tags artifacts
build and test tag:
  stage: build
  extends: "build and test"
  artifacts:
    paths:
      - target
    reports:
      junit: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/surefire-reports/TEST-*.xml
      cobertura: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/coverage-site/jacoco.xml
  rules:
    - if: '$CI_COMMIT_TAG'
    - when: never


#####################################
########### Stage deploy ############
#####################################

# deploy a snapshot
deploy snapshot:
  image: alpine:latest
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - apk add libxml2-utils git
    - git config --global user.name "CF robot"
    - git config --global user.email "info@ng-analytics.com"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Clone cf git repository"
    - git clone git@gitlab.com:iwf/cf.git cf
    - cd cf
    - echo "Checkout branch $CI_COMMIT_BRANCH"
    - git checkout $CI_COMMIT_BRANCH
    - git branch -a
    - git status
    - echo "Copy the new build into the 'build/' folder in cf"
    - rm -R build/*
    - cp -R ../target/build/* build/
    - export CF_VERSION=$(xmllint --xpath 'string(//site/feature/@version)' build/site.xml)
    - echo "Deploy and Tag new CF build $CF_VERSION"
    - git status
    - git add -A
    - git status
    - git commit -a -m "CF build for version $CF_VERSION"
    - git status
    - git push
    - git tag -a $CF_VERSION -m "Autogenerated tag for version $CF_VERSION"
    - git push origin $CF_VERSION
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
      when: manual
    - when: never
  allow_failure: true


# deploy a release on master
### This jobs needs to define variable: 'VERSION' before being executed
### otherwise it will trigger an error and exit job
deploy release:
  image: alpine:latest
  stage: deploy
  variables: 
    BRANCH_DEVELOP: "develop"
    BRANCH_MASTER: "master"
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - apk add libxml2-utils git
    - git config --global user.name "CF robot"
    - git config --global user.email "info@ng-analytics.com"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Clone cf git repository"
    - git clone git@gitlab.com:iwf/cf.git cf
    - cd cf
    - echo "Checkout branch $BRANCH_DEVELOP"
    - git checkout $BRANCH_DEVELOP
    - git branch -a
    - git status
    - echo "Copy the new build into the 'build/' folder in cf"
    - rm -R build/*
    - cp -R ../target/build/* build/
    - export CF_VERSION=$(xmllint --xpath 'string(//site/feature/@version)' build/site.xml)
    - if [ $VERSION == $CF_VERSION ]; then echo "Version confirmation checked for build $CF_VERSION"; else echo "Version confirmation not good, entered version $VERSION does not match build version $CF_VERSION. This message protects from a mistake. Please confirm the version number by entering it manually in variable 'VERSION' before running this manual job." && exit 1; fi;
    - echo "Push CF build $CF_VERSION on $BRANCH_DEVELOP branch"
    - git status
    - git add -A
    - git status
    - git commit -a -m "CF build for version $CF_VERSION"
    - git status
    - git push
    - echo "Merge into $BRANCH_MASTER version $CF_VERSION"
    - git checkout $BRANCH_MASTER
    - git branch -a
    - git status
    - git merge --no-ff $BRANCH_DEVELOP
    - git push
    - echo "Tag new CF build $CF_VERSION"
    - git tag -a $CF_VERSION -m "Autogenerated tag for version $CF_VERSION"
    - git push origin $CF_VERSION
    - echo "Rebase $BRANCH_DEVELOP on $BRANCH_MASTER"
    - git checkout $BRANCH_DEVELOP
    - git branch -a
    - git status
    - git rebase $BRANCH_MASTER
    - git push origin $BRANCH_DEVELOP --force
  rules:
    - if: '$CI_COMMIT_BRANCH == $BRANCH_DEVELOP'
      when: manual
    - when: never
  allow_failure: true

#####################################
########## Stage javadoc ############
#####################################

#javadoc:
#  stage: javadoc
#  script:
#    - cd src/gov.sandia.cf/bundles/gov.sandia.cf.plugin/
#    - mvn javadoc:javadoc
#    - mkdir .public
#    - mkdir .public/$CI_COMMIT_REF_NAME
#    - cp -r target/site/apidocs/* .public/$CI_COMMIT_REF_NAME
#    - mv .public public
#  artifacts:
#    expire_in: 3 days
#    paths:
#      - src/gov.sandia.cf/bundles/gov.sandia.cf.plugin/public
#  only:
#    - develop
#  allow_failure: true

# Publish javadoc to Gitlab Pages
pages:
  stage: javadoc
  needs: []
  script:
  - mkdir .public
  - cp -r doc/javadoc/* .public
  - mv .public public
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG'
      changes:
      - doc/javadoc/**/*
    - when: manual
      changes:
      - doc/javadoc/**/*
  allow_failure: true
