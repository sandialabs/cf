image: alpine:latest

# Add code source quality and security scan
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml


stages:
  - test # check code with gitlab code quality check and SpotBugs
  - build # build the artifacts and launch unit tests
  - coverage # converts jacoco tests coverage to cobertura
  - package # package the artifacts and import them into Gitlab Package Registry
  - release # create a new release (snapshot or stable) (create a tag and merge develop branch if necessary)
  - publish # publish documentation, p2 repository and javadoc from Gitlab Package Registry to Gitlab Pages


variables:
  MAVEN_CLI_OPTS: ""
  PROJECT_ROOT_POM: "src/gov.sandia.cf/"
  DS_JAVA_VERSION: 8
  DS_EXCLUDED_ANALYZERS: "gemnasium-maven"

# Workaround for Gitlab issue generating a detached pipeline for "rules" "if" "manual" jobs
workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE != "detached"'

#####################################
########## Stage test ############
#####################################

# Override code_quality job to keep report artifacts
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

# Override Gitlab job (spotbugs-sast)
spotbugs-sast:
  stage: test
  image: maven:3.8.4-jdk-11
  extends: []
  needs: []
  before_script:
    - echo "==================== [test] Installing GUI test dependencies ============="
    - apt-get update -y
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [test] Verifying cf plugin =========================="
    - cd $PROJECT_ROOT_POM
    - mvn $MAVEN_CLI_OPTS clean verify -DskipTests
  artifacts:
    reports:
      sast: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/spotbugsXml.xml


#####################################
########## Stage build ############
#####################################

# Test and Build:
#  - automatically if it is a branch
# (keep artifacts 3 days)
build and test:
  stage: build
  image: maven:3.8.4-jdk-11
  before_script:
    - echo "==================== [build] Installing GUI test dependencies ============"
    - apt-get update -y
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb graphviz libswt-gtk-4-java
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    - echo "Creating artifacts folder"
    - mkdir -p target/build/eclipse
    - mkdir -p target/build/webapp
    - mkdir -p target/coverage
  script:
    # Test and Build Plugin
    - echo "==================== [build] Building and testing CF plugin =============="
    - cd $PROJECT_ROOT_POM
    - mvn $MAVEN_CLI_OPTS clean install
    # Package Plugin
    - echo "==================== [build] Packaging plugin ============================"
    - cp -R releng/gov.sandia.cf.update/target/site/. ../../target/build/eclipse/
    # Copy test reports
    - echo "==================== [build] Copying test coverage report ================"
    - cp -R tests/gov.sandia.cf.plugin.tests/target/coverage-site/. ../../target/coverage/
    - cp tests/gov.sandia.cf.plugin.tests/target/build-test.log ../../target/build-test.log
    # Test and Build webapp
    - echo "==================== [build] Building CF webapp =========================="
    - cd web/gov.sandia.cf.webapp/
    - mvn clean package spring-boot:repackage -Dpackaging=jar
    # Package webapp
    - echo "==================== [build] Packaging SpringBoot .jar ==================="
    - find target/ -name \*.jar -exec cp {} ../../../../target/build/webapp/ \;
    - mkdir -p ../../../../target/build/webapp/config/
    - cp src/main/resources/application-prod.properties ../../../../target/build/webapp/config/application.properties
    - cd ../../
  artifacts:
    expire_in: 3 days
    paths:
      - target
    reports:
      junit: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/coverage-site/jacoco.xml
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - when: never

# Test, Build and create Javadoc:
#  - automatically if it is a tag
# (keep artifacts for ever)
build and test tag:
  stage: build
  image: maven:3.8.4-jdk-11
  before_script:
    - echo "==================== [build] Installing GUI test dependencies ============"
    - apt-get update -y
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb graphviz libswt-gtk-4-java
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    - echo "Creating artifacts folder"
    - mkdir -p target/build/eclipse
    - mkdir -p target/build/webapp
    - mkdir -p target/coverage
    - mkdir -p target/javadoc
  script: 
    - echo "==================== [build] Building and testing CF plugin =============="
    - cd $PROJECT_ROOT_POM
    - mvn $MAVEN_CLI_OPTS clean install
    # Copy build
    - echo "==================== [build] Copying build into the artifacts folder ====="
    - cp -R releng/gov.sandia.cf.update/target/site/. ../../target/build/eclipse/
    # Copy test reports
    - echo "==================== [build] Copying test coverage report ================"
    - cp -R tests/gov.sandia.cf.plugin.tests/target/coverage-site/. ../../target/coverage/
    - cp tests/gov.sandia.cf.plugin.tests/target/build-test.log ../../target/build-test.log
    # Test webapp
    - echo "==================== [build] Building and testing CF webapp =============="
    - cd web/gov.sandia.cf.webapp/
    - mvn clean package spring-boot:repackage -Dpackaging=jar
    # Package webapp
    - echo "==================== [build] Packaging SpringBoot .jar ==================="
    - find target/ -name \*.jar -exec cp {} ../../../../target/build/webapp/ \;
    - mkdir -p ../../../../target/build/webapp/config/
    - cp src/main/resources/application-prod.properties ../../../../target/build/webapp/config/application.properties
    - cd ../../
    # Generate Javadoc
    - echo "==================== [build] Generating CF Javadoc ======================="
    - cd bundles/gov.sandia.cf.plugin/
    - mvn javadoc:javadoc
    - cp -r target/site/apidocs/* ../../../../target/javadoc/
  artifacts:
    paths:
      - target
    reports:
      junit: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: src/gov.sandia.cf/tests/gov.sandia.cf.plugin.tests/target/coverage-site/jacoco.xml
  rules:
    - if: '$CI_COMMIT_TAG'
    - when: never


#####################################
########## Stage coverage ###########
#####################################
coverage-build:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or choose an existing stage like `deploy`.
  stage: coverage
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/coverage/jacoco.xml $CI_PROJECT_DIR/src/gov.sandia.cf/bundles/gov.sandia.cf.plugin/src/main/java > target/coverage/cobertura.xml
  needs:
    - job: "build and test"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/coverage/cobertura.xml
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - when: never

coverage-build-tag:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or choose an existing stage like `deploy`.
  stage: coverage
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/coverage/jacoco.xml $CI_PROJECT_DIR/src/gov.sandia.cf/bundles/gov.sandia.cf.plugin/src/main/java > target/coverage/cobertura.xml
  needs:
    - job: "build and test tag"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/coverage/cobertura.xml
  rules:
    - if: '$CI_COMMIT_TAG'
    - when: never

#####################################
########## Stage package ############
#####################################
  
# Package (builds and javadoc) into Gitlab package registry
#  - automatically if it is a tag
#  - manually if it is a protected branch (develop, master)
package:
  image: alpine:latest
  stage: package
  variables:
    PACKAGENAME: "gov.sandia.cf"
    P2_REPO_FILE_PREFIX: gov.sandia.cf.p2_repo
    WEBAPP_FILE_PREFIX: gov.sandia.cf.webapp
    JAVADOC_FILE_PREFIX: gov.sandia.cf.javadoc
    LATEST_VERSION: "latest"
  before_script:
    - echo "==================== [package] Install dependencies ======================"
    - apk update && apk add wget curl zip libxml2-utils jq git
    - mkdir target/package
  script:
    - export CF_VERSION=$(xmllint --xpath 'string(//site/feature/@version)' target/build/eclipse/site.xml)
    - if [ -z "$CF_VERSION" ]; then echo "No version found. Impossible to continue package import job." && exit 1; else echo "CF Version $CF_VERSION"; fi;
    # Remove existing packages folders
    - echo "==================== [package] Remove $CF_VERSION folder"
    - wget --header "PRIVATE-TOKEN:$CF_ROBOT_PRIVATE_TOKEN" -q -O packages.json $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages
    - export DELETE_CURRENT_VERSION_API_PATH=$(jq -r --arg CF_VERSION "$CF_VERSION" '.[] | select(.version==$CF_VERSION) | ._links.delete_api_path' ./packages.json)
    - if [ -z "$DELETE_CURRENT_VERSION_API_PATH" ]; then echo "$CF_VERSION package not found in Package Registry"; else curl --request DELETE --user $DEPLOY_CREDENTIALS  $DELETE_CURRENT_VERSION_API_PATH; fi;
    - echo "==================== [package] Remove $LATEST_VERSION folder"
    - wget --header "PRIVATE-TOKEN:$CF_ROBOT_PRIVATE_TOKEN" -q -O packages.json $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages
    - export DELETE_LATEST_API_PATH=$(jq -r --arg LATEST_VERSION "$LATEST_VERSION" '.[] | select(.version==$LATEST_VERSION) | ._links.delete_api_path' ./packages.json)
    - if [ -z "$DELETE_LATEST_API_PATH" ]; then echo "Latest package not found in Package Registry"; else curl --request DELETE --user $DEPLOY_CREDENTIALS  $DELETE_LATEST_API_PATH; fi;
    # Import p2 repository into Gitlab package registry
    - echo "==================== [package] Zipping CF plugin $CF_VERSION to prepare package import"
    - cd target/build/eclipse/
    - zip -q -r ../../package/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip *
    - echo "==================== [package] Importing CF build target/package/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../../package/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip?status=default
    - echo "==================== [package] Importing CF build target/package/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../../package/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$P2_REPO_FILE_PREFIX.$CF_VERSION.zip?status=default
    - cd ../../..
    # Import webapp into Gitlab package registry
    - echo "==================== [package] Zipping CF webapp $CF_VERSION to prepare package import"
    - cd target/build/webapp/
    - zip -q -r ../../package/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip *
    - echo "==================== [package] Importing CF build target/package/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../../package/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip?status=default
    - echo "==================== [package] Importing CF build target/package/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../../package/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$WEBAPP_FILE_PREFIX.$CF_VERSION.zip?status=default
    - cd ../../..
    # Import javadoc (if it exists) into Gitlab package registry
    - if [ -d "../javadoc" ]; then echo "Zipping CF javadoc $CF_VERSION to prepare package import"; else echo "No javadoc found" && exit 0; fi
    - cd target/javadoc/
    - zip -q -r ../package/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip *
    - echo "==================== [package] Importing CF javadoc target/package/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../package/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/$CF_VERSION/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip?status=default
    - echo "==================== [package] Importing CF javadoc target/package/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip into Gitlab package registry $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip?status=default"
    - curl --user $DEPLOY_CREDENTIALS --upload-file ../package/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGENAME/latest/$JAVADOC_FILE_PREFIX.$CF_VERSION.zip?status=default
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
      when: manual
    - when: never
  allow_failure: true


#####################################
########### Stage release ############
#####################################

# Release a snapshot:
#  - only manually if it is a protected branch
release snapshot:
  image: alpine:latest
  stage: release
  before_script:
    - echo "==================== [release] Install dependencies ======================"
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - apk add libxml2-utils git
    - git config --global user.name "CF robot"
    - git config --global user.email "info@ng-analytics.com"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Clone and checkout $CI_COMMIT_BRANCH
    - echo "==================== [release] Cloning CF git repository ================="
    - git clone git@gitlab.com:CredibilityFramework/cf.git cf
    - cd cf
    - echo "==================== [release] Checkout branch $CI_COMMIT_BRANCH ==========="
    - git checkout $CI_COMMIT_BRANCH
    - git branch -a
    - git status
    - export CF_VERSION=$(xmllint --xpath 'string(//site/feature/@version)' ../target/build/eclipse/site.xml)
    - echo "==================== [release] Tag new CF build $CF_VERSION =============="
    - git tag -a $CF_VERSION -m "Autogenerated tag for version $CF_VERSION"
    - git push origin $CF_VERSION
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
      when: manual
    - when: never
  allow_failure: true


# Release a stable version on the master branch:
#  - only manually if it is the develop branch
# /!\ This jobs needs to define variable before execution: 'VERSION' before being executed otherwise it will trigger an error and exit job.
release in master:
  image: alpine:latest
  stage: release
  variables: 
    BRANCH_DEVELOP: "develop"
    BRANCH_MASTER: "master"
  before_script:
    - echo "==================== [release] Install dependencies ======================"
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - apk add libxml2-utils git
    - git config --global user.name "CF robot"
    - git config --global user.email "info@ng-analytics.com"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Clone and checkout develop branch
    - echo "==================== [release] Cloning CF git repository ================="
    - git clone git@gitlab.com:CredibilityFramework/cf.git cf
    - cd cf
    - echo "==================== [release] Checkout branch $BRANCH_DEVELOP ==========="
    - git checkout $BRANCH_DEVELOP
    - export CF_VERSION=$(xmllint --xpath 'string(//site/feature/@version)' ../target/build/eclipse/site.xml)
    - if [ $VERSION == $CF_VERSION ]; then echo "Version confirmation checked for build $CF_VERSION"; else echo "Version confirmation not good, entered version $VERSION does not match build version $CF_VERSION. This message protects from a mistake. Please confirm the version number by entering it manually in variable 'VERSION' before running this manual job." && exit 1; fi;
    - echo "==================== [release] Merge into $BRANCH_MASTER version $CF_VERSION" 
    - git checkout $BRANCH_MASTER
    - git branch -a
    - git status
    - git merge --no-ff $BRANCH_DEVELOP
    - git push
    # Tag and push from master               
    - echo "==================== [release] Tag new CF build $CF_VERSION =============="
    - git tag -a $CF_VERSION -m "Autogenerated tag for version $CF_VERSION"
    - git push origin $CF_VERSION
    - echo "==================== [release] Rebase $BRANCH_DEVELOP on $BRANCH_MASTER =="
    - git checkout $BRANCH_DEVELOP
    - git branch -a
    - git status
    - git rebase $BRANCH_MASTER
    - git push origin $BRANCH_DEVELOP --force
  rules:
    - if: '$CI_COMMIT_BRANCH == $BRANCH_DEVELOP'
      when: manual
    - when: never
  allow_failure: true


#####################################
########## Stage publish ############
#####################################

# Publish documentation, p2 repository and javadoc from Gitlab Package Registry to Gitlab Pages:
#  - automatically if it is the 'master' branch or a tag
#  - manually if it is a protected branch (to avoid Gitlab Pages hack by another branch)
pages:
  image: ruby:3.0
  stage: publish
  variables: 
    PACKAGENAME: "gov.sandia.cf" # used into ci/doc/site/unzip-packages.sh script
    P2_REPO_FILE_PREFIX: "gov.sandia.cf.p2_repo" # used into ci/doc/site/unzip-packages.sh script
    WEBAPP_FILE_PREFIX: "gov.sandia.cf.webapp" # used into ci/doc/site/unzip-packages.sh script
    JAVADOC_FILE_PREFIX: "gov.sandia.cf.javadoc" # used into ci/doc/site/unzip-packages.sh script
  before_script:
    - echo "==================== [publish] Install dependencies ===================="
    - apt-get update -y && apt-get install -y wget curl unzip findutils jq
  script:
    - echo "==================== [publish] Build documentation ====================="
    - echo "==================== [publish] Extracting CF Packages =================="  
    - . ci/doc/site/unzip-packages.sh doc/site/
    - echo "==================== [publish] Generating CF site pages to $CI_PAGES_URL"
    - . ci/doc/site/generate-pages.sh doc/site/
    - echo "==================== [publish] Creating Jekyll site ===================="
    - cd doc/site/
    - gem install jekyll bundler jekyll-remote-include
    - jekyll build -d ../../public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG'
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
      when: manual
    - when: never
  allow_failure: true
