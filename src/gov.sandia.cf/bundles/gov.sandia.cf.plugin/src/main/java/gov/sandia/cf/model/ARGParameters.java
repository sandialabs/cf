/*************************************************************************************************************
See LICENSE file at <a href="https://gitlab.com/CredibilityFramework/cf/-/blob/master/LICENSE">CF LICENSE</a>}
*************************************************************************************************************/
package gov.sandia.cf.model;

import java.io.Serializable;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import gov.sandia.cf.model.query.EntityFilter;

/**
 * 
 * The ARG Parameters class.
 * 
 * @author Didier Verstraete
 *
 */
@Entity
@Table(name = "ARG_PARAMETERS")
public class ARGParameters implements Serializable, IEntity<ARGParameters, Integer> {

	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Field Filter
	 */
	@SuppressWarnings("javadoc")
	public enum Filter implements EntityFilter {
		ARG_EXECUTABLE_PATH("argExecPath"), //$NON-NLS-1$
		ARG_PREEXECUTION_SCRIPT("argPreScript"), //$NON-NLS-1$
		USE_ARG_LOCAL_CONF("useArgLocalConf"), //$NON-NLS-1$
		OUTPUT("output"), //$NON-NLS-1$
		PARAMETERS_FILE_PATH("parametersFilePath"), //$NON-NLS-1$
		STRUCTURE_FILE_PATH("structureFilePath"), //$NON-NLS-1$
		FILENAME("filename"), //$NON-NLS-1$
		TITLE("title"), //$NON-NLS-1$
		AUTHOR("author"), //$NON-NLS-1$
		BACKEND_TYPE("backendType"), //$NON-NLS-1$
		INLINE_WORD_DOC("inlineWordDoc"), //$NON-NLS-1$
		NUMBER("number"), //$NON-NLS-1$
		REPORT_TYPE("reportType"), //$NON-NLS-1$
		PLANNING_ENABLED("planningEnabled"), //$NON-NLS-1$
		PLANNING_INTENDEDPURPOSE_ENABLED("planningIntendedPurposeEnabled"), //$NON-NLS-1$
		PLANNING_SYSREQ_ENABLED("planningSysReqEnabled"), //$NON-NLS-1$
		PLANNING_QOIPLANNER_ENABLED("planningQoIPlannerEnabled"), //$NON-NLS-1$
		PLANNING_UNCERTAINTY_ENABLED("planningUncertaintyEnabled"), //$NON-NLS-1$
		PLANNING_DECISION_ENABLED("planningDecisionEnabled"), //$NON-NLS-1$
		PIRT_ENABLED("pirtEnabled"), //$NON-NLS-1$
		PCMM_ENABLED("pcmmEnabled"), //$NON-NLS-1$
		PCMM_PLANNING_ENABLED("pcmmPlanningEnabled"), //$NON-NLS-1$
		PCMM_EVIDENCE_ENABLED("pcmmEvidenceEnabled"), //$NON-NLS-1$
		PCMM_ASSESSMENT_ENABLED("pcmmAssessmentEnabled"), //$NON-NLS-1$
		PCMM_TAG("pcmmTagSelected"), //$NON-NLS-1$
		CUSTOM_ENDING_ENABLED("customEndingEnabled"), //$NON-NLS-1$
		CUSTOM_ENDING_FILE_PATH("customEndingFilePath"); //$NON-NLS-1$

		private String field;

		/**
		 * Filter
		 * 
		 * @param field
		 */
		Filter(String field) {
			this.field = field;
		}

		/**
		 * {@inheritDoc}
		 */
		public String getField() {
			return this.field;
		}
	}

	/**
	 * The id field linked to ID column
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ID")
	private Integer id;

	/**
	 * argPath: the arg path used to execute ARG
	 */
	@Column(name = "ARG_EXECUTABLE_PATH", columnDefinition = "LONGVARCHAR")
	private String argExecPath;

	/**
	 * argPreScript: the script executed before ARG execution (i.e. set
	 * environment,...)
	 */
	@Column(name = "ARG_PREEXECUTION_SCRIPT", columnDefinition = "LONGVARCHAR")
	private String argPreScript;

	/**
	 * useArgLocalConf: indicates if we should use the .cf file embedded
	 * configuration or the local configuration stored in Eclipse preferences.
	 */
	@Column(name = "USE_ARG_LOCAL_CONF")
	private Boolean useArgLocalConf;

	/**
	 * output: expects an absolute path to the output directory selected by the
	 * user. As ARG can make up to one level of directory, if the selected one is
	 * more deeply located, ARG may be modified to cover it. Also, any level may not
	 * contain a / in its name as it would be interpreted as a new directory level.
	 */
	@Column(name = "OUTPUT", columnDefinition = "LONGVARCHAR")
	private String output;
	/**
	 * structure: expects the path to the structure file generated by CF, relative
	 * to the location from where ARG process is executed. Its name may of course be
	 * customized
	 */
	@Column(name = "PARAMETERS_FILE_PATH", columnDefinition = "LONGVARCHAR")
	private String parametersFilePath;
	/**
	 * structure: expects the path to the structure file generated by CF, relative
	 * to the location from where ARG process is executed. Its name may of course be
	 * customized
	 */
	@Column(name = "STRUCTURE_FILE_PATH", columnDefinition = "LONGVARCHAR")
	private String structureFilePath;
	/**
	 * file_name: is self-explanatory
	 */
	@Column(name = "FILENAME")
	private String filename;
	/**
	 * title: defines the title of the report to be generated -- not to be confused
	 * with file_name. When no value is provided, a default ARG Report is given
	 */
	@Column(name = "TITLE")
	private String title;
	/**
	 * author: defines the author of the report to be generated
	 */
	@Column(name = "AUTHOR")
	private String author;
	/**
	 * backend_type: can either be Word or LaTeX based on user's preferences
	 */
	@Column(name = "BACKEND_TYPE")
	private String backendType;
	/**
	 * inlineWordDoc: used to inline or not the word documents
	 */
	@Column(name = "INLINE_WORD_DOC")
	private Boolean inlineWordDoc;
	/**
	 * number: is of no use in current version of ARG
	 */
	@Column(name = "NUMBER")
	private String number;
	/**
	 * report_type: only accepts Report in this version
	 */
	@Column(name = "REPORT_TYPE")
	private String reportType;

	/**
	 * planningEnabled: indicates if planning option is enabled or not
	 */
	@Column(name = "PLANNING_ENABLED")
	private Boolean planningEnabled;

	/**
	 * planningIntendedPurposeEnabled: indicates if planning intended purpose option
	 * is enabled or not
	 */
	@Column(name = "PLANNING_INTENDEDPURPOSE_ENABLED")
	private Boolean planningIntendedPurposeEnabled;

	/**
	 * planningSysReqEnabled: indicates if planning system requirements option is
	 * enabled or not
	 */
	@Column(name = "PLANNING_SYSREQ_ENABLED")
	private Boolean planningSysReqEnabled;

	/**
	 * planningQoIPlannerEnabled: indicates if planning QoI Planner option is
	 * enabled or not
	 */
	@Column(name = "PLANNING_QOIPLANNER_ENABLED")
	private Boolean planningQoIPlannerEnabled;

	/**
	 * planningUncertaintyEnabled: indicates if planning Uncertainty option is
	 * enabled or not
	 */
	@Column(name = "PLANNING_UNCERTAINTY_ENABLED")
	private Boolean planningUncertaintyEnabled;

	/**
	 * planningDecisionEnabled: indicates if planning Decision option is enabled or
	 * not
	 */
	@Column(name = "PLANNING_DECISION_ENABLED")
	private Boolean planningDecisionEnabled;

	/**
	 * pirtEnabled: indicates if PIRT option is enabled or not
	 */
	@Column(name = "PIRT_ENABLED")
	private Boolean pirtEnabled;

	/**
	 * qoiSelectedList: indicates which PIRT QoI is selected
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "argParameter", cascade = { CascadeType.PERSIST, CascadeType.REMOVE,
			CascadeType.REFRESH })
	private List<ARGParametersQoIOption> qoiSelectedList;

	/**
	 * pcmmEnabled: indicates if PCMM option is enabled or not
	 */
	@Column(name = "PCMM_ENABLED")
	private Boolean pcmmEnabled;

	/**
	 * pcmmPlanningEnabled: indicates if PCMM planning option is enabled or not
	 */
	@Column(name = "PCMM_PLANNING_ENABLED")
	private Boolean pcmmPlanningEnabled;

	/**
	 * pcmmPlanningEnabled: indicates if PCMM evidence option is enabled or not
	 */
	@Column(name = "PCMM_EVIDENCE_ENABLED")
	private Boolean pcmmEvidenceEnabled;

	/**
	 * pcmmPlanningEnabled: indicates if PCMM assessment option is enabled or not
	 */
	@Column(name = "PCMM_ASSESSMENT_ENABLED")
	private Boolean pcmmAssessmentEnabled;

	/**
	 * pcmmTagSelected: indicates which PCMM tag is selected
	 */
	@ManyToOne(fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "PCMM_TAG")
	private Tag pcmmTagSelected;

	/**
	 * customEndingEnabled: indicates if custom ending option is enabled or not
	 */
	@Column(name = "CUSTOM_ENDING_ENABLED")
	private Boolean customEndingEnabled;

	/**
	 * customEndingFilePath: expects the path to the custom ending structure file to
	 * append to the structure file generated by CF, relative to the location from
	 * where ARG process is executed.
	 */
	@Column(name = "CUSTOM_ENDING_FILE_PATH", columnDefinition = "LONGVARCHAR")
	private String customEndingFilePath;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@SuppressWarnings("javadoc")
	public String getArgExecPath() {
		return argExecPath;
	}

	@SuppressWarnings("javadoc")
	public void setArgExecPath(String argExecPath) {
		this.argExecPath = argExecPath;
	}

	@SuppressWarnings("javadoc")
	public String getArgPreScript() {
		return argPreScript;
	}

	@SuppressWarnings("javadoc")
	public void setArgPreScript(String argPreScript) {
		this.argPreScript = argPreScript;
	}

	@SuppressWarnings("javadoc")
	public Boolean getUseArgLocalConf() {
		return useArgLocalConf;
	}

	@SuppressWarnings("javadoc")
	public void setUseArgLocalConf(Boolean useArgLocalConf) {
		this.useArgLocalConf = useArgLocalConf;
	}

	@SuppressWarnings("javadoc")
	public String getOutput() {
		return output;
	}

	@SuppressWarnings("javadoc")
	public void setOutput(String output) {
		this.output = output;
	}

	@SuppressWarnings("javadoc")
	public String getParametersFilePath() {
		return parametersFilePath;
	}

	@SuppressWarnings("javadoc")
	public void setParametersFilePath(String parametersFilePath) {
		this.parametersFilePath = parametersFilePath;
	}

	@SuppressWarnings("javadoc")
	public String getStructureFilePath() {
		return structureFilePath;
	}

	@SuppressWarnings("javadoc")
	public void setStructureFilePath(String structureFilePath) {
		this.structureFilePath = structureFilePath;
	}

	@SuppressWarnings("javadoc")
	public String getFilename() {
		return filename;
	}

	@SuppressWarnings("javadoc")
	public void setFilename(String filename) {
		this.filename = filename;
	}

	@SuppressWarnings("javadoc")
	public String getTitle() {
		return title;
	}

	@SuppressWarnings("javadoc")
	public void setTitle(String title) {
		this.title = title;
	}

	@SuppressWarnings("javadoc")
	public String getAuthor() {
		return author;
	}

	@SuppressWarnings("javadoc")
	public void setAuthor(String author) {
		this.author = author;
	}

	@SuppressWarnings("javadoc")
	public String getBackendType() {
		return backendType;
	}

	@SuppressWarnings("javadoc")
	public void setBackendType(String backendType) {
		this.backendType = backendType;
	}

	@SuppressWarnings("javadoc")
	public Boolean getInlineWordDoc() {
		return inlineWordDoc;
	}

	@SuppressWarnings("javadoc")
	public void setInlineWordDoc(Boolean inlineWordDoc) {
		this.inlineWordDoc = inlineWordDoc;
	}

	@SuppressWarnings("javadoc")
	public String getNumber() {
		return number;
	}

	@SuppressWarnings("javadoc")
	public void setNumber(String number) {
		this.number = number;
	}

	@SuppressWarnings("javadoc")
	public String getReportType() {
		return reportType;
	}

	@SuppressWarnings("javadoc")
	public void setReportType(String reportType) {
		this.reportType = reportType;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningEnabled() {
		return planningEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningEnabled(Boolean planningEnabled) {
		this.planningEnabled = planningEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningIntendedPurposeEnabled() {
		return planningIntendedPurposeEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningIntendedPurposeEnabled(Boolean planningIntendedPurposeEnabled) {
		this.planningIntendedPurposeEnabled = planningIntendedPurposeEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningSysReqEnabled() {
		return planningSysReqEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningSysReqEnabled(Boolean planningSysReqEnabled) {
		this.planningSysReqEnabled = planningSysReqEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningQoIPlannerEnabled() {
		return planningQoIPlannerEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningQoIPlannerEnabled(Boolean planningQoIPlannerEnabled) {
		this.planningQoIPlannerEnabled = planningQoIPlannerEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningUncertaintyEnabled() {
		return planningUncertaintyEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningUncertaintyEnabled(Boolean planningUncertaintyEnabled) {
		this.planningUncertaintyEnabled = planningUncertaintyEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPlanningDecisionEnabled() {
		return planningDecisionEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPlanningDecisionEnabled(Boolean planningDecisionEnabled) {
		this.planningDecisionEnabled = planningDecisionEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPirtEnabled() {
		return pirtEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPirtEnabled(Boolean pirtEnabled) {
		this.pirtEnabled = pirtEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPcmmEnabled() {
		return pcmmEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPcmmEnabled(Boolean pcmmEnabled) {
		this.pcmmEnabled = pcmmEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPcmmPlanningEnabled() {
		return pcmmPlanningEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPcmmPlanningEnabled(Boolean pcmmPlanningEnabled) {
		this.pcmmPlanningEnabled = pcmmPlanningEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPcmmEvidenceEnabled() {
		return pcmmEvidenceEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPcmmEvidenceEnabled(Boolean pcmmEvidenceEnabled) {
		this.pcmmEvidenceEnabled = pcmmEvidenceEnabled;
	}

	@SuppressWarnings("javadoc")
	public Boolean getPcmmAssessmentEnabled() {
		return pcmmAssessmentEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setPcmmAssessmentEnabled(Boolean pcmmAssessmentEnabled) {
		this.pcmmAssessmentEnabled = pcmmAssessmentEnabled;
	}

	@SuppressWarnings("javadoc")
	public Tag getPcmmTagSelected() {
		return pcmmTagSelected;
	}

	@SuppressWarnings("javadoc")
	public void setPcmmTagSelected(Tag pcmmTagSelected) {
		this.pcmmTagSelected = pcmmTagSelected;
	}

	@SuppressWarnings("javadoc")
	public List<ARGParametersQoIOption> getQoiSelectedList() {
		return qoiSelectedList;
	}

	@SuppressWarnings("javadoc")
	public void setQoiSelectedList(List<ARGParametersQoIOption> qoiSelectedList) {
		this.qoiSelectedList = qoiSelectedList;
	}

	@SuppressWarnings("javadoc")
	public Boolean getCustomEndingEnabled() {
		return customEndingEnabled;
	}

	@SuppressWarnings("javadoc")
	public void setCustomEndingEnabled(Boolean customEndingEnabled) {
		this.customEndingEnabled = customEndingEnabled;
	}

	@SuppressWarnings("javadoc")
	public String getCustomEndingFilePath() {
		return customEndingFilePath;
	}

	@SuppressWarnings("javadoc")
	public void setCustomEndingFilePath(String customEndingFilePath) {
		this.customEndingFilePath = customEndingFilePath;
	}

	/**
	 * Create a copy of current entity with id null and referenced entity or entity
	 * list null
	 * 
	 * @return a copy of the current ARGParameters
	 */
	public ARGParameters copy() {
		ARGParameters entity = new ARGParameters();
		entity.setArgExecPath(getArgExecPath());
		entity.setArgPreScript(getArgPreScript());
		entity.setUseArgLocalConf(getUseArgLocalConf());
		entity.setAuthor(getAuthor());
		entity.setBackendType(getBackendType());
		entity.setInlineWordDoc(getInlineWordDoc());
		entity.setFilename(getFilename());
		entity.setNumber(getNumber());
		entity.setOutput(getOutput());
		entity.setParametersFilePath(getParametersFilePath());
		entity.setReportType(getReportType());
		entity.setStructureFilePath(getStructureFilePath());
		entity.setTitle(getTitle());
		entity.setPlanningEnabled(getPlanningEnabled());
		entity.setPlanningIntendedPurposeEnabled(getPlanningIntendedPurposeEnabled());
		entity.setPlanningSysReqEnabled(getPlanningSysReqEnabled());
		entity.setPlanningQoIPlannerEnabled(getPlanningQoIPlannerEnabled());
		entity.setPlanningUncertaintyEnabled(getPlanningUncertaintyEnabled());
		entity.setPlanningDecisionEnabled(getPlanningDecisionEnabled());
		entity.setPirtEnabled(getPirtEnabled());
		entity.setPcmmEnabled(getPcmmEnabled());
		entity.setPcmmPlanningEnabled(getPcmmPlanningEnabled());
		entity.setPcmmEvidenceEnabled(getPcmmEvidenceEnabled());
		entity.setPcmmAssessmentEnabled(getPcmmAssessmentEnabled());
		entity.setPcmmTagSelected(getPcmmTagSelected());
		entity.setQoiSelectedList(getQoiSelectedList());
		entity.setCustomEndingEnabled(getCustomEndingEnabled());
		entity.setCustomEndingFilePath(getCustomEndingFilePath());
		return entity;
	}

}
